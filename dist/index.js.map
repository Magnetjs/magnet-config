{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOqB,MAAM;AACzB,WADmB,MAAM,CACb,GAAG,EAAE;wCADE,MAAM;;AAEvB,QAAI,CAAC,GAAG,GAAG,GAAG,CAAC;GAChB;;6BAHkB,MAAM;;;UAMnB,MAAM,eACL,aAAa,EAAE,YAAY,EAAE,WAAW;;;;;;AADzC,oBAAM,GAAG,EAAE;;qBACwC,CACrD,IAAI,CAAC,kBAAkB,EAAE,EACzB,IAAI,CAAC,iBAAiB,EAAE,EACxB,IAAI,CAAC,gBAAgB,EAAE,CACxB;;;;;AAJI,2BAAa;AAAE,0BAAY;AAAE,yBAAW;;AAM7C,oBAAM,GAAG,iBAAE,KAAK,CAAC,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;;AAEnE,kBAAI,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;;;;;;;;;;;0BAGrB;AACJ,aAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;;4BAEO,IAAI,EAAE;AACZ,UAAI,CAAC,MAAM,CAAC,KAAK,GAAG;AAClB,WAAG,EAAE,IAAI;OACV,CAAC;KACH;;;2DAEY,UAAU;UACjB,MAAM,EAEN,MAAM,EAKC,IAAI;;;;;AAPX,oBAAM;;qBAES,aAAG,MAAM,CAAC,UAAU,CAAC;;;AAApC,oBAAM;;mBAEN,MAAM;;;;;AACR,oBAAM,GAAG,0BAAW,UAAU,CAAC,CAAC;;AAEhC,mBAAS,IAAI,IAAI,MAAM,EAAE;AACvB,oBAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,OAAO,EAAE;AACnD,wBAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;iBACnC;eACF;;gDAEM,MAAM;;;gDAEN,EAAE;;;;;;;;;;;;UAOP,MAAM;;;;;;;AAAN,oBAAM,GAAG,IAAI;;mBAEb,MAAM;;;;;gDACD,OAAO,CAAC,mBAAmB,CAAC;;;;;;;;;;;;UAKjC,MAAM;;;;;;qBAAS,aAAG,MAAM,CAAI,OAAO,CAAC,GAAG,EAAE,oBAAiB;;;AAA1D,oBAAM;;mBAEN,MAAM;;;;;;qBACK,IAAI,CAAC,WAAW,CAAI,OAAO,CAAC,GAAG,EAAE,oBAAiB;;;;;;;;;;;;;;;;;;;;UAQ7D,MAAM;;;;;;qBAAS,aAAG,MAAM,CAAI,OAAO,CAAC,GAAG,EAAE,wBAAqB;;;AAA9D,oBAAM;;mBAEN,MAAM;;;;;;qBACK,IAAI,CAAC,WAAW,CAAI,OAAO,CAAC,GAAG,EAAE,wBAAqB;;;;;;;;;;;;;SAzEpD,MAAM;;;;;;;;;;;;kBAAN,MAAM","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport walk from 'walk';\nimport path from 'path';\nimport fs from 'mz/fs';\nimport co from 'co';\nimport requireAll from 'require-all';\n\nexport default class Config {\n  constructor(app) {\n    this.app = app;\n  }\n\n  *setup() {\n    let config = {};\n    let [defaultConfig, serverConfig, shareConfig] = yield [\n      this.setupDefaultConfig(),\n      this.setupServerConfig(),\n      this.setupShareConfig()\n    ];\n\n    config = _.merge(config, defaultConfig, serverConfig, shareConfig);\n\n    this.app.config = config;\n  }\n\n  get() {\n    return this.config;\n  }\n\n  appPath(path) {\n    this.config.paths = {\n      app: path\n    };\n  }\n\n  *setupConfig(configPath) {\n    let config;\n\n    let exists = yield fs.exists(configPath);\n\n    if (exists) {\n      config = requireAll(configPath);\n\n      for (let conf in config) {\n        if (config.hasOwnProperty(conf) && conf !== 'index') {\n          config[conf] = config[conf][conf];\n        }\n      }\n\n      return config;\n    } else {\n      return {};\n    }\n  }\n\n  *setupDefaultConfig() {\n    // TODO: Why it throw undefined\n    // let exists = yield fs.exists('./config/index.js');\n    let exists = true;\n\n    if (exists) {\n      return require('./config/index.js');\n    }\n  }\n\n  *setupServerConfig() {\n    let exists = yield fs.exists(`${process.cwd()}/server/config`);\n\n    if (exists) {\n      return yield this.setupConfig(`${process.cwd()}/server/config`);\n    }\n  }\n\n  /**\n   * Config for frontend and backend development\n   */\n  *setupShareConfig() {\n    let exists = yield fs.exists(`${process.cwd()}/isomorphic/config`);\n\n    if (exists) {\n      return yield this.setupConfig(`${process.cwd()}/isomorphic/config`);\n    }\n  }\n}\n\n// export function config(basePath) {\n//   var config = new Config(basePath);\n//\n//   config.initDefault();\n//   config.this.appConfig();\n//\n//   return config;\n// }\n"],"sourceRoot":"/source/"}